import { Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import { User, RefreshToken, Account, Category, Transaction, Debt, ExchangeRate } from '../models';
import config from '../config/config';
import { Op } from 'sequelize';
import sequelize from '../config/database';
import { AuthRequest } from '../middleware/auth';

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤
const generateTokens = (userId: string) => {
  const accessToken = jwt.sign(
    { userId }, 
    config.jwt.secret,
    { expiresIn: config.jwt.expiresIn } as jwt.SignOptions
  );

  const refreshToken = jwt.sign(
    { userId, type: 'refresh' }, 
    config.jwt.secret,
    { expiresIn: config.jwt.refreshExpiresIn } as jwt.SignOptions
  );

  return { accessToken, refreshToken };
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const initializeUserData = async (userId: string): Promise<void> => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ
  const existingAccounts = await Account.count({ where: { user_id: userId } });
  const existingCategories = await Category.count({ where: { user_id: userId } });
  
  // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –Ω–µ —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
  if (existingAccounts > 0 || existingCategories > 0) {
    console.log(`[initializeUserData] User ${userId} already has data (${existingAccounts} accounts, ${existingCategories} categories), skipping default creation`);
    return;
  }

  console.log(`[initializeUserData] Creating default data for new user: ${userId}`);

  // –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const defaultCategories = [
    { name: '–ü—Ä–æ–¥—É–∫—Ç—ã', icon: 'üõí', color: '#FF6B6B', type: 'expense' },
    { name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', icon: 'üöå', color: '#4ECDC4', type: 'expense' },
    { name: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', icon: 'üéÆ', color: '#45B7D1', type: 'expense' },
    { name: '–ó–∞—Ä–ø–ª–∞—Ç–∞', icon: 'üí∞', color: '#95E1D3', type: 'income' },
    { name: '–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞', icon: 'üíµ', color: '#F38181', type: 'income' },
  ];

  for (const cat of defaultCategories) {
    await Category.create({
      user_id: userId,
      name: cat.name,
      icon: cat.icon,
      color: cat.color,
      type: cat.type as 'income' | 'expense',
      is_system: true,
    });
  }

  // –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å—á–µ—Ç
  await Account.create({
    user_id: userId,
    name: '–ù–∞–ª–∏—á–Ω—ã–µ',
    type: 'cash',
    balance: 0,
    currency: 'RUB',
    icon: 'üíµ',
    color: '#95E1D3',
    is_default: true,
    is_included_in_total: true,
  });
};

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const register = async (req: Request, res: Response): Promise<void> => {
  try {
    const { email, password, displayName } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await User.findOne({ where: { email } });
    if (existingUser) {
      res.status(400).json({ error: 'User with this email already exists' });
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.create({
      email,
      password,
      display_name: displayName || email.split('@')[0],
    });

    const userId = user.id;

    // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã
    const { accessToken, refreshToken } = generateTokens(userId);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh —Ç–æ–∫–µ–Ω
    const expiresAt = new Date();
    expiresAt.setDate(expiresAt.getDate() + 30); // 30 –¥–Ω–µ–π

    await RefreshToken.create({
      user_id: userId,
      token: refreshToken,
      expires_at: expiresAt,
    });

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await initializeUserData(userId);

    res.status(201).json({
      user: {
        id: userId,
        email: user.email,
        displayName: user.display_name,
        isPremium: user.is_premium,
        isGuest: user.is_guest,
      },
      accessToken,
      refreshToken,
    });
  } catch (error) {
    console.error('Registration error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

// –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
export const login = async (req: Request, res: Response): Promise<void> => {
  try {
    const { email, password } = req.body;

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findOne({ where: { email } });
    if (!user) {
      res.status(401).json({ error: 'Invalid email or password' });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isValidPassword = await user.validatePassword(password);
    if (!isValidPassword) {
      res.status(401).json({ error: 'Invalid email or password' });
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥
    await user.update({ last_login: new Date() });

    const userId = user.id;

    // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã
    const { accessToken, refreshToken } = generateTokens(userId);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh —Ç–æ–∫–µ–Ω
    const expiresAt = new Date();
    expiresAt.setDate(expiresAt.getDate() + 30);

    await RefreshToken.create({
      user_id: userId,
      token: refreshToken,
      expires_at: expiresAt,
    });

    res.json({
      user: {
        id: userId,
        email: user.email,
        displayName: user.display_name,
        isPremium: user.is_premium,
        isGuest: user.is_guest,
      },
      accessToken,
      refreshToken,
    });
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
export const refreshToken = async (req: Request, res: Response): Promise<void> => {
  try {
    const { refreshToken } = req.body;

    if (!refreshToken) {
      res.status(400).json({ error: 'Refresh token is required' });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    const decoded = jwt.verify(refreshToken, config.jwt.secret) as { userId: string; type: string };
    
    if (decoded.type !== 'refresh') {
      res.status(401).json({ error: 'Invalid token type' });
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ
    const storedToken = await RefreshToken.findOne({
      where: { token: refreshToken, user_id: decoded.userId },
    });

    if (!storedToken) {
      res.status(401).json({ error: 'Invalid refresh token' });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
    if (storedToken.isExpired()) {
      await storedToken.destroy();
      res.status(401).json({ error: 'Refresh token expired' });
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findByPk(decoded.userId);
    if (!user) {
      res.status(401).json({ error: 'User not found' });
      return;
    }

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω
    await storedToken.destroy();

    const userId = user.id;

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
    const tokens = generateTokens(userId);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π refresh —Ç–æ–∫–µ–Ω
    const expiresAt = new Date();
    expiresAt.setDate(expiresAt.getDate() + 30);

    await RefreshToken.create({
      user_id: userId,
      token: tokens.refreshToken,
      expires_at: expiresAt,
    });

    res.json({
      accessToken: tokens.accessToken,
      refreshToken: tokens.refreshToken,
    });
  } catch (error) {
    if (error instanceof jwt.JsonWebTokenError) {
      res.status(401).json({ error: 'Invalid refresh token' });
      return;
    }
    console.error('Refresh token error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
export const logout = async (req: Request, res: Response): Promise<void> => {
  try {
    const { refreshToken } = req.body;

    if (refreshToken) {
      // –£–¥–∞–ª—è–µ–º refresh —Ç–æ–∫–µ–Ω
      await RefreshToken.destroy({
        where: { token: refreshToken },
      });
    }

    res.json({ message: 'Logged out successfully' });
  } catch (error) {
    console.error('Logout error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
export const guestLogin = async (req: Request, res: Response): Promise<void> => {
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π email –¥–ª—è –≥–æ—Å—Ç—è
    const guestEmail = `guest_${Date.now()}@cashcraft.local`;
    const guestPassword = Math.random().toString(36).substring(7);

    // –°–æ–∑–¥–∞–µ–º –≥–æ—Å—Ç–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.create({
      email: guestEmail,
      password: guestPassword,
      display_name: 'Guest User',
      is_guest: true,
    });

    const userId = user.id;

    // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã
    const { accessToken, refreshToken } = generateTokens(userId);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh —Ç–æ–∫–µ–Ω
    const expiresAt = new Date();
    expiresAt.setDate(expiresAt.getDate() + 30);

    await RefreshToken.create({
      user_id: userId,
      token: refreshToken,
      expires_at: expiresAt,
    });

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await initializeUserData(userId);

    res.json({
      user: {
        id: userId,
        email: user.email,
        displayName: user.display_name,
        isPremium: user.is_premium,
        isGuest: user.is_guest,
      },
      accessToken,
      refreshToken,
    });
  } catch (error) {
    console.error('Guest login error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

// –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google
export const googleLogin = async (req: Request, res: Response): Promise<void> => {
  try {
    const { email, name, googleId } = req.body;
    console.log('Google login request:', { email, name, googleId });

    let user: User | null;
    let userId: string;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Google ID
    user = await User.findOne({ where: { google_id: googleId } });

    if (user) {
      // Case 1: User found by google_id
      userId = user.id;
      await user.update({ last_login: new Date() });
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
      user = await User.findOne({ where: { email } });

      if (user) {
        // Case 2: User found by email, link to googleId
        await user.update({ google_id: googleId, last_login: new Date() });
        userId = user.id;
      } else {
        // Case 3: Create new user
        const newUser = await User.create({
          email,
          password: Math.random().toString(36).substring(7), // –°–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å
          display_name: name || email.split('@')[0],
          google_id: googleId,
          is_verified: true,
          last_login: new Date(), // Set last_login on creation
        });
        userId = newUser.id;
        await initializeUserData(userId);
        // Re-fetch to have a consistent instance for the response
        user = await User.findByPk(userId); 
        if(!user) {
            // This should realistically not happen
            throw new Error("Could not fetch newly created user for response.");
        }
      }
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã
    const { accessToken, refreshToken } = generateTokens(userId);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh —Ç–æ–∫–µ–Ω
    const expiresAt = new Date();
    expiresAt.setDate(expiresAt.getDate() + 30);

    await RefreshToken.create({
      user_id: userId,
      token: refreshToken,
      expires_at: expiresAt,
    });

    res.json({
      user: {
        id: userId,
        email: user.email,
        displayName: user.display_name,
        isPremium: user.is_premium,
        isGuest: user.is_guest,
      },
      accessToken,
      refreshToken,
    });
  } catch (error) {
    console.error('Google login error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

// –°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const resetUserData = async (req: AuthRequest, res: Response): Promise<void> => {
  const transaction = await sequelize.transaction();
  try {
    const userId = req.userId;
    if (!userId) {
      await transaction.rollback();
      res.status(401).json({ error: 'Unauthorized' });
      return;
    }

    console.log(`[ResetData] Resetting all data for user: ${userId}`);

    // 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const deletedTransactions = await Transaction.destroy({
      where: { user_id: userId },
      transaction,
    });
    console.log(`[ResetData] Deleted ${deletedTransactions} transactions`);

    // 2. –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–æ–ª–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const deletedDebts = await Debt.destroy({
      where: { user_id: userId },
      transaction,
    });
    console.log(`[ResetData] Deleted ${deletedDebts} debts`);

    // 3. –£–¥–∞–ª—è–µ–º –í–°–ï –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ)
    const deletedCategories = await Category.destroy({
      where: { user_id: userId },
      transaction,
    });
    console.log(`[ResetData] Deleted ${deletedCategories} categories (all)`);

    // 4. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const deletedAccounts = await Account.destroy({
      where: { user_id: userId },
      transaction,
    });
    console.log(`[ResetData] Deleted ${deletedAccounts} accounts`);

    // 5. –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
    const deletedExchangeRates = await ExchangeRate.destroy({
      where: { user_id: userId },
      transaction,
    });
    console.log(`[ResetData] Deleted ${deletedExchangeRates} exchange rates`);

    // 6. –£–¥–∞–ª—è–µ–º –≤—Å–µ refresh —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const deletedRefreshTokens = await RefreshToken.destroy({
      where: { user_id: userId },
      transaction,
    });
    console.log(`[ResetData] Deleted ${deletedRefreshTokens} refresh tokens`);

    await transaction.commit();

    // 7. –ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –ù–ï —Å–æ–∑–¥–∞—ë–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º —Ä–µ—à–∏—Ç —á—Ç–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å
    console.log(`[ResetData] Data reset completed for user: ${userId}. User can now create their own accounts and categories.`);

    res.json({
      message: 'All user data reset successfully',
      deleted: {
        transactions: deletedTransactions,
        debts: deletedDebts,
        categories: deletedCategories,
        accounts: deletedAccounts,
        exchangeRates: deletedExchangeRates,
        refreshTokens: deletedRefreshTokens,
      }
    });
  } catch (error) {
    await transaction.rollback();
    console.error('Reset user data error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

// –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
export const fullResetUserData = async (req: AuthRequest, res: Response): Promise<void> => {
  const transaction = await sequelize.transaction();
  try {
    const userId = req.userId;
    if (!userId) {
      await transaction.rollback();
      res.status(401).json({ error: 'Unauthorized' });
      return;
    }

    console.log(`[FullReset] Deleting ALL user data for user: ${userId}`);

    const deletedTransactions = await Transaction.destroy({ where: { user_id: userId }, transaction });
    const deletedDebts = await Debt.destroy({ where: { user_id: userId }, transaction });
    const deletedCategories = await Category.destroy({ where: { user_id: userId }, transaction });
    const deletedAccounts = await Account.destroy({ where: { user_id: userId }, transaction });
    const deletedExchangeRates = await ExchangeRate.destroy({ where: { user_id: userId }, transaction });

    await transaction.commit();

    res.json({
      message: 'All user data fully deleted',
      deleted: {
        transactions: deletedTransactions,
        debts: deletedDebts,
        categories: deletedCategories,
        accounts: deletedAccounts,
        exchangeRates: deletedExchangeRates,
      }
    });
  } catch (error) {
    await transaction.rollback();
    console.error('Full reset user data error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};
