import { Response } from 'express';
import { Op } from 'sequelize';
import { Category, Transaction } from '../models';
import { AuthRequest } from '../middleware/auth';

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö)
export const getCategories = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const categories = await Category.findAll({
      where: {
        [Op.or]: [
          { is_system: true },
          { user_id: req.userId }
        ]
      },
      order: [['type', 'ASC'], ['name', 'ASC']],
    });

    res.json(categories);
  } catch (error) {
    console.error('Get categories error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export const createCategory = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const { name, type, icon, color } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (!req.user?.isPremiumActive()) {
      const userCategoriesCount = await Category.count({
        where: { user_id: req.userId },
      });

      if (userCategoriesCount >= 5) {
        res.status(403).json({ 
          error: 'Free users can create maximum 5 custom categories. Upgrade to premium for unlimited categories.' 
        });
        return;
      }
    }

    const category = await Category.create({
      user_id: req.userId!,
      name,
      type,
      icon,
      color,
      is_system: false,
    });

    res.status(201).json(category);
  } catch (error) {
    console.error('Create category error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export const updateCategory = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const updateData = req.body;

    const category = await Category.findOne({
      where: { 
        id, 
        [Op.or]: [
          { user_id: req.userId },
          { is_system: true }
        ]
      },
    });

    if (!category) {
      res.status(404).json({ error: 'Category not found' });
      return;
    }

    // –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å
    if (category.is_system && Object.keys(updateData).some(key => key !== 'name')) {
      res.status(403).json({ error: 'System categories can only be renamed' });
      return;
    }

    await category.update(updateData);
    res.json(category);
  } catch (error) {
    console.error('Update category error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export const deleteCategory = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const { id } = req.params;

    const category = await Category.findOne({
      where: { id, user_id: req.userId },
    });

    if (!category) {
      res.status(404).json({ error: 'Category not found' });
      return;
    }

    if (category.is_system) {
      res.status(403).json({ error: 'Cannot delete system categories' });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
    const transactionCount = await Transaction.count({
      where: { category_id: id },
    });

    if (transactionCount > 0) {
      res.status(400).json({ 
        error: `Cannot delete category. It is used in ${transactionCount} transactions.` 
      });
      return;
    }

    await category.destroy();
    res.status(204).send();
  } catch (error) {
    console.error('Delete category error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

// –°–±—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º
export const resetCategories = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await Category.destroy({
      where: { user_id: req.userId, is_system: false },
    });

    // –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const defaultCategories = [
      { name: '–ü—Ä–æ–¥—É–∫—Ç—ã', icon: 'üõí', color: '#FF6B6B', type: 'expense' },
      { name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', icon: 'üöå', color: '#4ECDC4', type: 'expense' },
      { name: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', icon: 'üéÆ', color: '#45B7D1', type: 'expense' },
      { name: '–ó–∞—Ä–ø–ª–∞—Ç–∞', icon: 'üí∞', color: '#95E1D3', type: 'income' },
      { name: '–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞', icon: 'üíµ', color: '#F38181', type: 'income' },
    ];

    const createdCategories = [];
    for (const cat of defaultCategories) {
      const category = await Category.create({
        user_id: req.userId!,
        name: cat.name,
        icon: cat.icon,
        color: cat.color,
        type: cat.type as 'income' | 'expense',
        is_system: true,
      });
      createdCategories.push(category);
    }

    res.json({
      message: 'Categories reset successfully',
      categories: createdCategories,
    });
  } catch (error) {
    console.error('Reset categories error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};
